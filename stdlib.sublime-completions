{
	"scope" : "source.luae - string",
	"completions":
	[
		// Constants
		"_G",
		"_VERSION",
		{ "trigger": "pac{
	"scope" : "source.luae - string",
	"completions":
	[
		// Constants
		"_G",
		"_VERSION",
		{ "trigger": "package_cpath", "contents": "package.cpath" },
		{ "trigger": "package_loaded", "contents": "package.loaded" },
		{ "trigger": "package_loaders", "contents": "package.loaders" },
		{ "trigger": "package_path", "contents": "package.path" },
		{ "trigger": "package_preload", "contents": "package.preload" },
		{ "trigger": "math_pi", "contents": "math.pi" },
		{ "trigger": "math_huge", "contents": "math.huge" },

		// The rest
		{ "trigger": "collectgarbage( opt, arg )", "contents": "collectgarbage( ${1:opt}, ${2:arg} )" },
		{ "trigger": "getfenv( f )", "contents": "getfenv( ${1:f} )" },
		{ "trigger": "getmetatable( object )", "contents": "getmetatable( ${1:object} )" },
		{ "trigger": "ipairs( t )", "contents": "ipairs( ${1:t} )" },
		{ "trigger": "load( func, chunkname )", "contents": "load( ${1:func}, ${2:chunkname} )" },
		{ "trigger": "loadstring( string, chunkname )", "contents": "loadstring( ${1:string}, ${2:chunkname} )" },
		{ "trigger": "next( table, index )", "contents": "next( ${1:table}, ${2:index} )" },
		{ "trigger": "pairs( t )", "contents": "pairs( ${1:t} )" },
		{ "trigger": "pcall( f, arg1, ... )", "contents": "pcall( ${1:f}, ${2:arg1}, ${3:...} )" },
		{ "trigger": "print( ... )", "contents": "print( ${1:...} )" },
		{ "trigger": "rawequal( v1, v2 )", "contents": "rawequal( ${1:v1}, ${2:v2} )" },
		{ "trigger": "rawget( table, index )", "contents": "rawget( ${1:table}, ${2:index} )" },
		{ "trigger": "rawset( table, index, value )", "contents": "rawset( ${1:table}, ${2:index}, ${3:value} )" },
		{ "trigger": "select( index, ... )", "contents": "select( ${1:index}, ${2:...} )" },
		{ "trigger": "setfenv( f, table )", "contents": "setfenv( ${1:f}, ${2:table} )" },
		{ "trigger": "setmetatable( table, metatable )", "contents": "setmetatable( ${1:table}, ${2:metatable} )" },
		{ "trigger": "tonumber( e, base )", "contents": "tonumber( ${1:e}, ${2:base} )" },
		{ "trigger": "tostring( e )", "contents": "tostring( ${1:e} )" },
		{ "trigger": "type( v )", "contents": "type( ${1:v} )" },
		{ "trigger": "unpack( list, i, j )", "contents": "unpack( ${1:list}, ${2:i}, ${3:j} )" },
		{ "trigger": "xpcall( f, err )", "contents": "xpcall( ${1:f}, ${2:err} )" },
		{ "trigger": "module( name, ... )", "contents": "module( ${1:name}, ${2:...} )" },
		{ "trigger": "require( modname )", "contents": "require( ${1:modname} )" },
		{ "trigger": "package_loadlib( libname, funcname )", "contents": "package.loadlib( ${1:libname}, ${2:funcname} )" },
		{ "trigger": "package_seeall( module )", "contents": "package.seeall( ${1:module} )" },
		{ "trigger": "string_byte( s, i, j )", "contents": "string.byte( ${1:s}, ${2:i}, ${3:j} )" },
		{ "trigger": "string_char( ... )", "contents": "string.char( ${1:...} )" },
		{ "trigger": "string_dump( function )", "contents": "string.dump( ${1:func} )" },
		{ "trigger": "string_find( s, pattern, init, plain )", "contents": "string.find( ${1:s}, ${2:pattern}, ${3:init}, ${4:plain} )" },
		{ "trigger": "string_format( formatstring, ... )", "contents": "string.format( ${1:formatstring}, ${2:...} )" },
		{ "trigger": "string_gmatch( s, pattern )", "contents": "string.gmatch( ${1:s}, ${2:pattern} )" },
		{ "trigger": "string_gsub( s, pattern, repl, n )", "contents": "string.gsub( ${1:s}, ${2:pattern}, ${3:repl}, ${4:n} )" },
		{ "trigger": "string_len( s )", "contents": "string.len( ${1:s} )" },
		{ "trigger": "string_lower( s )", "contents": "string.lower( ${1:s} )" },
		{ "trigger": "string_match( s, pattern, init )", "contents": "string.match( ${1:s}, ${2:pattern}, ${3:init} )" },
		{ "trigger": "string_rep( s, n )", "contents": "string.rep( ${1:s}, ${2:n} )" },
		{ "trigger": "string_reverse( s )", "contents": "string.reverse( ${1:s} )" },
		{ "trigger": "string_sub( s, i, j )", "contents": "string.sub( ${1:s}, ${2:i}, ${3:j} )" },
		{ "trigger": "string_upper( s )", "contents": "string.upper( ${1:s} )" },
		{ "trigger": "table_concat( table, sep, i, j )", "contents": "table.concat( ${1:table}, ${2:sep}, ${3:i}, ${4:j} )" },
		{ "trigger": "table_insert( table, pos, value )", "contents": "table.insert( ${1:table}, ${2:pos}, ${3:value} )" },
		{ "trigger": "table_maxn( table )", "contents": "table.maxn( ${1:table} )" },
		{ "trigger": "table_remove( table, pos )", "contents": "table.remove( ${1:table}, ${2:pos} )" },
		{ "trigger": "table_sort( table, comp )", "contents": "table.sort( ${1:table}, ${2:comp} )" },
		{ "trigger": "math_abs( x )", "contents": "math.abs( ${1:x} )" },
		{ "trigger": "math_acos( x )", "contents": "math.acos( ${1:x} )" },
		{ "trigger": "math_asin( x )", "contents": "math.asin( ${1:x} )" },
		{ "trigger": "math_atan( x )", "contents": "math.atan( ${1:x} )" },
		{ "trigger": "math_atan2( y, x )", "contents": "math.atan2( ${1:y}, ${2:x} )" },
		{ "trigger": "math_ceil( x )", "contents": "math.ceil( ${1:x} )" },
		{ "trigger": "math_cos( x )", "contents": "math.cos( ${1:x} )" },
		{ "trigger": "math_cosh( x )", "contents": "math.cosh( ${1:x} )" },
		{ "trigger": "math_deg( x )", "contents": "math.deg( ${1:x} )" },
		{ "trigger": "math_exp( x )", "contents": "math.exp( ${1:x} )" },
		{ "trigger": "math_floor( x )", "contents": "math.floor( ${1:x} )" },
		{ "trigger": "math_fmod( x, y )", "contents": "math.fmod( ${1:x}, ${2:y} )" },
		{ "trigger": "math_frexp( x )", "contents": "math.frexp( ${1:x} )" },
		{ "trigger": "math_ldexp( m, e )", "contents": "math.ldexp( ${1:m}, ${2:e} )" },
		{ "trigger": "math_log( x )", "contents": "math.log( ${1:x} )" },
		{ "trigger": "math_log10( x )", "contents": "math.log10( ${1:x} )" },
		{ "trigger": "math_max( x, ... )", "contents": "math.max( ${1:x}, ${2:...} )" },
		{ "trigger": "math_min( x, ... )", "contents": "math.min( ${1:x}, ${2:...} )" },
		{ "trigger": "math_modf( x )", "contents": "math.modf( ${1:x} )" },
		{ "trigger": "math_pow( x, y )", "contents": "math.pow( ${1:x}, ${2:y} )" },
		{ "trigger": "math_rad( x )", "contents": "math.rad( ${1:x} )" },
		{ "trigger": "math_random( m, n )", "contents": "math.random( ${1:m}, ${2:n} )" },
		{ "trigger": "math_randomseed( x )", "contents": "math.randomseed( ${1:x} )" },
		{ "trigger": "math_sin( x )", "contents": "math.sin( ${1:x} )" },
		{ "trigger": "math_sinh( x )", "contents": "math.sinh( ${1:x} )" },
		{ "trigger": "math_sqrt( x )", "contents": "math.sqrt( ${1:x} )" },
		{ "trigger": "math_tan( x )", "contents": "math.tan( ${1:x} )" },
		{ "trigger": "math_tanh( x )", "contents": "math.tanh( ${1:x} )" },

		// Gamesense api
		{ "trigger": "client_set_event_callback(event_name, callback)", "contents": "client.set_event_callback(${1:event_name}, ${2:callback})" },
		
		{ "trigger": "client_log(msg, ...)", "contents": "client.log(${1:msg}, ${2:...})" },
		{ "trigger": "client_color_log(r, g, b, msg, ..)", "contents": "client.color_log(${1:r}, ${2:g}, ${3:b}, ${4:msg}, ${5:...})" },
		
		{ "trigger": "client_exec(cmd, ...)", "contents": "client.exec(${1:cmd}, ${2:...})" },
		{ "trigger": "client_userid_to_entindex(entity_index)", "contents": "client.userid_to_entindex(${1:entity_index})" },

		{ "trigger": "client_random_int(minimum, maximum)", "contents": "client.random_int(${1:minimum}, ${2:maximum})" },
		{ "trigger": "client_random_float(minimum, maximum)", "contents": "client.random_float(${1:minimum}, ${2:maximum})" },
		
		{ "trigger": "client_get_cvar(cvar_name)", "contents": "client.get_cvar(${1:cvar_name})" },
		{ "trigger": "client_set_cvar(cvar_name, value)", "contents": "client.set_cvar(${1:cvar_name}, ${2:value})" },
		
		{ "trigger": "client_draw_hitboxes(entindex, duration, hitboxes, r, g, b)", "contents": "client.draw_hitboxes(${1:entindex}, ${2:duration}, ${3:hitboxes}, ${4:r}, ${5:g}, ${6:b})" },
		{ "trigger": "client_draw_debug_text(x, y, z, line_offset, duration, r, g, b, a, ...)", "contents": "client.draw_debug_text(${1:x}, ${2:y}, ${3:z}, ${4:line_offset}, ${5:duration}, ${6:r}, ${7:g}, ${8:b}, ${9:a}, ${10:...})" },
		{ "trigger": "client_draw_text(paint_ctx, x, y, r, g, b, a, flags, max_width, ...)", "contents": "client.draw_text(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:r}, ${5:g}, ${6:b}, ${7:a}, ${8:flags}, ${9:max_width}, ${10:...})" },
		{ "trigger": "client_draw_rectangle(paint_ctx, x, y, w, h, r, g, b, a)", "contents": "client.draw_rectangle(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:r}, ${7:g}, ${8:b}, ${9:a})" },
		{ "trigger": "client_draw_line(paint_ctx, xa, ya, xb, yb, r, g, b, a)", "contents": "client.draw_line(${1:paint_ctx}, ${2:xa}, ${3:ya}, ${4:xb}, ${5:yb}, ${6:r}, ${7:g}, ${8:b}, ${9:a})" },
		{ "trigger": "client_draw_gradient(paint_ctx, x, y, w, h, r1, g1, b1, a1, r2, g2, b2, a2, ltr)", "contents": "client.draw_gradient(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:r1}, ${7:g1}, ${8:b1}, ${9:a1}, ${10:r2}, ${11:g2}, ${12:b2}, ${13:a2}, ${14:ltr},)" },
		{ "trigger": "client_draw_circle(paint_ctx, x, y, r, g, b, a, radius, start_degrees, percentage)", "contents": "client.draw_circle(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:r}, ${5:g}, ${6:b}, ${7:a}, ${8:radius}, ${9:start_degrees}, ${10:percentage})" },
		{ "trigger": "client_draw_circle_outline(paint_ctx, x, y, r, g, b, a, radius, start_degrees, percentage, thickness)", "contents": "client.draw_circle_outline(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:r}, ${5:g}, ${6:b}, ${7:a}, ${8:radius}, ${9:start_degrees}, ${10:percentage}, ${11:thickness})" },
		{ "trigger": "client_draw_indicator(paint_ctx, r, g, b, a, ...)", "contents": "client.draw_indicator(${1:paint_ctx}, ${2:r}, ${3:g}, ${4:b}, ${5:a}, ${6:...})" },
		{ "trigger": "client_world_to_screen(paint_ctx, x, y, z)", "contents": "client.world_to_screen(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:z})" },
		
		{ "trigger": "client_timestamp()", "contents": "client.timestamp()" },
		{ "trigger": "client_system_time()", "contents": "client.system_time()" },
		{ "trigger": "client_screen_size()", "contents": "client.screen_size()" },
		{ "trigger": "client_latency()", "contents": "client.latency()" },
		{ "trigger": "client_camera_angles()", "contents": "client.camera_angles()" },
		{ "trigger": "client_eye_position()", "contents": "client.eye_position()" },
		{ "trigger": "client_visible(x, y, z)", "contents": "client.visible(${1:x}, ${2:y}, ${3:z})" },
		{ "trigger": "client_trace_line(skip_entindex, from_x, from_y, from_z, to_x, to_y, to_z)", "contents": "client.trace_line(${1:skip_entindex}, ${2:from_x}, ${3:from_y}, ${4:from_z}, ${5:to_x}, ${6:to_y}, ${7:to_z})" },
		{ "trigger": "client_delay_call(delay, callback, ...)", "contents": "client.delay_call(${1:delay}, ${2:callback}, ${3:...})" },
		{ "trigger": "client_set_clan_tag(string)", "contents": "client.visible(${1:string})" },

		{ "trigger": "entity_get_local_player()", "contents": "entity.get_local_player()" },
		{ "trigger": "entity_get_all(classname)", "contents": "entity.get_all(${1:classname})" },
		{ "trigger": "entity_get_players(enemies_only)", "contents": "entity.get_players(${1:enemies_only})" },
		{ "trigger": "entity_get_classname(entity)", "contents": "entity.get_classname(${1:entity})" },

		{ "trigger": "entity_get_prop(ent, propname, array_index)", "contents": "entity.get_prop(${1:ent}, ${2:propname}, ${3:array_index})" },
		{ "trigger": "entity_set_prop(ent, propname, value, array_index)", "contents": "entity.set_prop(${1:ent}, ${2:propname}, ${3:value}, ${4:array_index})" },

		{ "trigger": "entity_is_alive(entity_index)", "contents": "entity.is_alive(${1:entity_index})" },
		{ "trigger": "entity_is_enemy(entity_index)", "contents": "entity.is_enemy(${1:entity_index})" },
		{ "trigger": "entity_is_dormant(entity_index)", "contents": "entity.is_dormant(${1:entity_index})" },
		{ "trigger": "entity_get_player_name(entity_index)", "contents": "entity.get_player_name(${1:entity_index})" },
		{ "trigger": "entity_get_player_weapon(entity_index)", "contents": "entity.get_player_weapon(${1:entity_index})" },
		{ "trigger": "entity_hitbox_position(entity_index, hitbox)", "contents": "entity.hitbox_position(${1:entity_index}, ${2:hitbox})" },
		{ "trigger": "entity_get_steam64(entity_index)", "contents": "entity.get_steam64(${1:entity_index})" },
		{ "trigger": "entity_get_bounding_box(paint_ctx, entity_index)", "contents": "entity.get_bounding_box(${1:paint_ctx}, ${2:entity_index})" },

		{ "trigger": "globals_realtime()", "contents": "globals.realtime()" },
		{ "trigger": "globals_curtime()", "contents": "globals.curtime()" },
		{ "trigger": "globals_absoluteframetime()", "contents": "globals.absoluteframetime()" },
		{ "trigger": "globals_frametime()", "contents": "globals.frametime()" },
		{ "trigger": "globals_framecount()", "contents": "globals.framecount()" },
		{ "trigger": "globals_maxplayers()", "contents": "globals.maxplayers()" },
		{ "trigger": "globals_tickcount()", "contents": "globals.tickcount()" },
		{ "trigger": "globals_tickinterval()", "contents": "globals.tickinterval()" },
		{ "trigger": "globals_mapname()", "contents": "globals.mapname()" },

		{ "trigger": "ui_reference(tab, container, name)", "contents": "ui.reference(${1:tab}, ${2:container}, ${3:name})" },
		{ "trigger": "ui_new_checkbox(tab, container, name)", "contents": "ui.new_checkbox(${1:tab}, ${2:container}, ${3:name})" },
		{ "trigger": "ui_new_hotkey(tab, container, name)", "contents": "ui.new_hotkey(${1:tab}, ${2:container}, ${3:name})" },
		{ "trigger": "ui_new_button(tab, container, name, callback)", "contents": "ui.new_button(${1:tab}, ${2:container}, ${3:name}, ${4:callback})" },
		{ "trigger": "ui_new_slider(tab, container, name, min, max, init_value, show_tooltip, unit, scale, tooltips)", "contents": "ui.new_slider(${1:tab}, ${2:container}, ${3:name}, ${4:min}, ${5:max}, ${6:init_value}, ${7:show_tooltip}, ${8:unit}, ${9:scale}, ${10:tooltips})" },
		{ "trigger": "ui_new_combobox(tab, container, name, ...)", "contents": "ui.new_combobox(${1:tab}, ${2:container}, ${3:name}, ${4:...})" },
		{ "trigger": "ui_new_multiselect(tab, container, name, ...)", "contents": "ui.new_multiselect(${1:tab}, ${2:container}, ${3:name}, ${4:...})" },
		{ "trigger": "ui_new_color_picker(tab, container, name, r, g, b, a)", "contents": "ui.new_color_picker(${1:tab}, ${2:container}, ${3:name}, ${4:r}, ${5:g}, ${6:b}, ${7:a})" },

		{ "trigger": "ui_set(item, value, ...)", "contents": "ui.set(${1:item}, ${2:value}, ${3:...})" },
		{ "trigger": "ui_get(item)", "contents": "ui.get(${1:item})" },
		{ "trigger": "ui_set_callback(item, callback)", "contents": "ui.set_callback(${1:item}, ${2:callback})" },
		{ "trigger": "ui_set_visible(item, visible)", "contents": "ui.set_visible(${1:item}, ${2:visible})" },
		{ "trigger": "ui_is_menu_open()", "contents": "ui.is_menu_open()" },

		{ "trigger": "renderer_draw_text(x, y, r, g, b, a, flags, max_width, ...)", "contents": "renderer.text(${1:x}, ${2:y}, ${3:r}, ${4:g}, ${5:b}, ${6:a}, ${7:flags}, ${8:max_width}, ${9:...})" },
		{ "trigger": "renderer_draw_rectangle(x, y, w, h, r, g, b, a)", "contents": "renderer.rectangle(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:r}, ${6:g}, ${7:b}, ${8:a})" },
		{ "trigger": "renderer_draw_line(xa, ya, xb, yb, r, g, b, a)", "contents": "renderer.line(${1:xa}, ${2:ya}, ${3:xb}, ${4:yb}, ${5:r}, ${6:g}, ${7:b}, ${8:a})" },
		{ "trigger": "renderer_draw_gradient(x, y, w, h, r1, g1, b1, a1, r2, g2, b2, a2, ltr)", "contents": "renderer.gradient(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:r1}, ${6:g1}, ${7:b1}, ${8:a1}, ${9:r2}, ${10:g2}, ${11:b2}, ${12:a2}, ${13:ltr})" },
		{ "trigger": "renderer_draw_circle(x, y, r, g, b, a, radius, start_degrees, percentage)", "contents": "renderer.circle(${1:x}, ${2:y}, ${3:r}, ${4:g}, ${5:b}, ${6:a}, ${7:radius}, ${8:start_degrees}, ${9:percentage})" },
		{ "trigger": "renderer_draw_circle_outline(x, y, r, g, b, a, radius, start_degrees, percentage, thickness)", "contents": "renderer.circle_outline(${1:x}, ${2:y}, ${3:r}, ${4:g}, ${5:b}, ${6:a}, ${7:radius}, ${8:start_degrees}, ${9:percentage}, ${10:thickness})" },
		{ "trigger": "renderer_draw_indicator(r, g, b, a, ...)", "contents": "renderer.indicator(${1:r}, ${2:g}, ${3:b}, ${4:a}, ${5:...})" },
		{ "trigger": "renderer_world_to_screen(x, y, z)", "contents": "renderer.world_to_screen(${1:x}, ${2:y}, ${3:z})" },

	]
}
age_cpath", "contents": "package.cpath" },
		{ "trigger": "package_loaded", "contents": "package.loaded" },
		{ "trigger": "package_loaders", "contents": "package.loaders" },
		{ "trigger": "package_path", "contents": "package.path" },
		{ "trigger": "package_preload", "contents": "package.preload" },
		{ "trigger": "math_pi", "contents": "math.pi" },
		{ "trigger": "math_huge", "contents": "math.huge" },

		// No-arg functions
		{ "trigger": "coroutine_running()", "contents": "coroutine.running()" },
		{ "trigger": "io_flush()", "contents": "io.flush()" },
		{ "trigger": "io_tmpfile()", "contents": "io.tmpfile()" },
		{ "trigger": "os_clock()", "contents": "os.clock()" },
		{ "trigger": "os_tmpname()", "contents": "os.tmpname()" },
		{ "trigger": "debug_debug()", "contents": "debug.debug()" },
		{ "trigger": "debug_getregistry()", "contents": "debug.getregistry()" },

		// The rest
		{ "trigger": "assert( v, message )", "contents": "assert( ${1:v}, ${2:message} )" },
		{ "trigger": "collectgarbage( opt, arg )", "contents": "collectgarbage( ${1:opt}, ${2:arg} )" },
		{ "trigger": "dofile( filename )", "contents": "dofile( ${1:filename} )" },
		{ "trigger": "error( message, level )", "contents": "error( ${1:message}, ${2:level} )" },
		{ "trigger": "getfenv( f )", "contents": "getfenv( ${1:f} )" },
		{ "trigger": "getmetatable( object )", "contents": "getmetatable( ${1:object} )" },
		{ "trigger": "ipairs( t )", "contents": "ipairs( ${1:t} )" },
		{ "trigger": "load( func, chunkname )", "contents": "load( ${1:func}, ${2:chunkname} )" },
		{ "trigger": "loadfile( filename )", "contents": "loadfile( ${1:filename} )" },
		{ "trigger": "loadstring( string, chunkname )", "contents": "loadstring( ${1:string}, ${2:chunkname} )" },
		{ "trigger": "next( table, index )", "contents": "next( ${1:table}, ${2:index} )" },
		{ "trigger": "pairs( t )", "contents": "pairs( ${1:t} )" },
		{ "trigger": "pcall( f, arg1, ... )", "contents": "pcall( ${1:f}, ${2:arg1}, ${3:...} )" },
		{ "trigger": "print( ... )", "contents": "print( ${1:...} )" },
		{ "trigger": "rawequal( v1, v2 )", "contents": "rawequal( ${1:v1}, ${2:v2} )" },
		{ "trigger": "rawget( table, index )", "contents": "rawget( ${1:table}, ${2:index} )" },
		{ "trigger": "rawset( table, index, value )", "contents": "rawset( ${1:table}, ${2:index}, ${3:value} )" },
		{ "trigger": "select( index, ... )", "contents": "select( ${1:index}, ${2:...} )" },
		{ "trigger": "setfenv( f, table )", "contents": "setfenv( ${1:f}, ${2:table} )" },
		{ "trigger": "setmetatable( table, metatable )", "contents": "setmetatable( ${1:table}, ${2:metatable} )" },
		{ "trigger": "tonumber( e, base )", "contents": "tonumber( ${1:e}, ${2:base} )" },
		{ "trigger": "tostring( e )", "contents": "tostring( ${1:e} )" },
		{ "trigger": "type( v )", "contents": "type( ${1:v} )" },
		{ "trigger": "unpack( list, i, j )", "contents": "unpack( ${1:list}, ${2:i}, ${3:j} )" },
		{ "trigger": "xpcall( f, err )", "contents": "xpcall( ${1:f}, ${2:err} )" },
		{ "trigger": "coroutine_create( f )", "contents": "coroutine.create( ${1:f} )" },
		{ "trigger": "coroutine_resume( co, val1, ... )", "contents": "coroutine.resume( ${1:co}, ${2:val1}, ${3:...} )" },
		{ "trigger": "coroutine_status( co )", "contents": "coroutine.status( ${1:co} )" },
		{ "trigger": "coroutine_wrap( f )", "contents": "coroutine.wrap( ${1:f} )" },
		{ "trigger": "coroutine_yield( ... )", "contents": "coroutine.yield( ${1:...} )" },
		{ "trigger": "module( name, ... )", "contents": "module( ${1:name}, ${2:...} )" },
		{ "trigger": "require( modname )", "contents": "require( ${1:modname} )" },
		{ "trigger": "package_loadlib( libname, funcname )", "contents": "package.loadlib( ${1:libname}, ${2:funcname} )" },
		{ "trigger": "package_seeall( module )", "contents": "package.seeall( ${1:module} )" },
		{ "trigger": "string_byte( s, i, j )", "contents": "string.byte( ${1:s}, ${2:i}, ${3:j} )" },
		{ "trigger": "string_char( ... )", "contents": "string.char( ${1:...} )" },
		{ "trigger": "string_dump( function )", "contents": "string.dump( ${1:func} )" },
		{ "trigger": "string_find( s, pattern, init, plain )", "contents": "string.find( ${1:s}, ${2:pattern}, ${3:init}, ${4:plain} )" },
		{ "trigger": "string_format( formatstring, ... )", "contents": "string.format( ${1:formatstring}, ${2:...} )" },
		{ "trigger": "string_gmatch( s, pattern )", "contents": "string.gmatch( ${1:s}, ${2:pattern} )" },
		{ "trigger": "string_gsub( s, pattern, repl, n )", "contents": "string.gsub( ${1:s}, ${2:pattern}, ${3:repl}, ${4:n} )" },
		{ "trigger": "string_len( s )", "contents": "string.len( ${1:s} )" },
		{ "trigger": "string_lower( s )", "contents": "string.lower( ${1:s} )" },
		{ "trigger": "string_match( s, pattern, init )", "contents": "string.match( ${1:s}, ${2:pattern}, ${3:init} )" },
		{ "trigger": "string_rep( s, n )", "contents": "string.rep( ${1:s}, ${2:n} )" },
		{ "trigger": "string_reverse( s )", "contents": "string.reverse( ${1:s} )" },
		{ "trigger": "string_sub( s, i, j )", "contents": "string.sub( ${1:s}, ${2:i}, ${3:j} )" },
		{ "trigger": "string_upper( s )", "contents": "string.upper( ${1:s} )" },
		{ "trigger": "table_concat( table, sep, i, j )", "contents": "table.concat( ${1:table}, ${2:sep}, ${3:i}, ${4:j} )" },
		{ "trigger": "table_insert( table, pos, value )", "contents": "table.insert( ${1:table}, ${2:pos}, ${3:value} )" },
		{ "trigger": "table_maxn( table )", "contents": "table.maxn( ${1:table} )" },
		{ "trigger": "table_remove( table, pos )", "contents": "table.remove( ${1:table}, ${2:pos} )" },
		{ "trigger": "table_sort( table, comp )", "contents": "table.sort( ${1:table}, ${2:comp} )" },
		{ "trigger": "math_abs( x )", "contents": "math.abs( ${1:x} )" },
		{ "trigger": "math_acos( x )", "contents": "math.acos( ${1:x} )" },
		{ "trigger": "math_asin( x )", "contents": "math.asin( ${1:x} )" },
		{ "trigger": "math_atan( x )", "contents": "math.atan( ${1:x} )" },
		{ "trigger": "math_atan2( y, x )", "contents": "math.atan2( ${1:y}, ${2:x} )" },
		{ "trigger": "math_ceil( x )", "contents": "math.ceil( ${1:x} )" },
		{ "trigger": "math_cos( x )", "contents": "math.cos( ${1:x} )" },
		{ "trigger": "math_cosh( x )", "contents": "math.cosh( ${1:x} )" },
		{ "trigger": "math_deg( x )", "contents": "math.deg( ${1:x} )" },
		{ "trigger": "math_exp( x )", "contents": "math.exp( ${1:x} )" },
		{ "trigger": "math_floor( x )", "contents": "math.floor( ${1:x} )" },
		{ "trigger": "math_fmod( x, y )", "contents": "math.fmod( ${1:x}, ${2:y} )" },
		{ "trigger": "math_frexp( x )", "contents": "math.frexp( ${1:x} )" },
		{ "trigger": "math_ldexp( m, e )", "contents": "math.ldexp( ${1:m}, ${2:e} )" },
		{ "trigger": "math_log( x )", "contents": "math.log( ${1:x} )" },
		{ "trigger": "math_log10( x )", "contents": "math.log10( ${1:x} )" },
		{ "trigger": "math_max( x, ... )", "contents": "math.max( ${1:x}, ${2:...} )" },
		{ "trigger": "math_min( x, ... )", "contents": "math.min( ${1:x}, ${2:...} )" },
		{ "trigger": "math_modf( x )", "contents": "math.modf( ${1:x} )" },
		{ "trigger": "math_pow( x, y )", "contents": "math.pow( ${1:x}, ${2:y} )" },
		{ "trigger": "math_rad( x )", "contents": "math.rad( ${1:x} )" },
		{ "trigger": "math_random( m, n )", "contents": "math.random( ${1:m}, ${2:n} )" },
		{ "trigger": "math_randomseed( x )", "contents": "math.randomseed( ${1:x} )" },
		{ "trigger": "math_sin( x )", "contents": "math.sin( ${1:x} )" },
		{ "trigger": "math_sinh( x )", "contents": "math.sinh( ${1:x} )" },
		{ "trigger": "math_sqrt( x )", "contents": "math.sqrt( ${1:x} )" },
		{ "trigger": "math_tan( x )", "contents": "math.tan( ${1:x} )" },
		{ "trigger": "math_tanh( x )", "contents": "math.tanh( ${1:x} )" },
		{ "trigger": "io_close( file )", "contents": "io.close( ${1:file} )" },
		{ "trigger": "io_input( file )", "contents": "io.input( ${1:file} )" },
		{ "trigger": "io_lines( filename )", "contents": "io.lines( ${1:filename} )" },
		{ "trigger": "io_open( filename, mode )", "contents": "io.open( ${1:filename}, ${2:mode} )" },
		{ "trigger": "io_output( file )", "contents": "io.output( ${1:file} )" },
		{ "trigger": "io_popen( prog, mode )", "contents": "io.popen( ${1:prog}, ${2:mode} )" },
		{ "trigger": "io_read( ... )", "contents": "io.read( ${1:...} )" },
		{ "trigger": "io_type( obj )", "contents": "io.type( ${1:obj} )" },
		{ "trigger": "io_write( ... )", "contents": "io.write( ${1:...} )" },
		{ "trigger": "os_date( format, time )", "contents": "os.date( ${1:format}, ${2:time} )" },
		{ "trigger": "os_difftime( t2, t1 )", "contents": "os.difftime( ${1:t2}, ${2:t1} )" },
		{ "trigger": "os_execute( command )", "contents": "os.execute( ${1:command} )" },
		{ "trigger": "os_exit( code )", "contents": "os.exit( ${1:code} )" },
		{ "trigger": "os_getenv( varname )", "contents": "os.getenv( ${1:varname} )" },
		{ "trigger": "os_remove( filename )", "contents": "os.remove( ${1:filename} )" },
		{ "trigger": "os_rename( oldname, newname )", "contents": "os.rename( ${1:oldname}, ${2:newname} )" },
		{ "trigger": "os_setlocale( locale, category )", "contents": "os.setlocale( ${1:locale}, ${2:category} )" },
		{ "trigger": "os_time( table )", "contents": "os.time( ${1:table} )" },
		{ "trigger": "debug_getfenv( o )", "contents": "debug.getfenv( ${1:o} )" },
		{ "trigger": "debug_gethook( thread )", "contents": "debug.gethook( ${1:thread} )" },
		{ "trigger": "debug_getinfo( thread, function, what )", "contents": "debug.getinfo( ${1:thread}, ${2:func}, ${3:what} )" },
		{ "trigger": "debug_getlocal( thread, level, local )", "contents": "debug.getlocal( ${1:thread}, ${2:level}, ${3:local} )" },
		{ "trigger": "debug_getmetatable( object )", "contents": "debug.getmetatable( ${1:object} )" },
		{ "trigger": "debug_getupvalue( func, up )", "contents": "debug.getupvalue( ${1:func}, ${2:up} )" },
		{ "trigger": "debug_setfenv( object, table )", "contents": "debug.setfenv( ${1:object}, ${2:table} )" },
		{ "trigger": "debug_sethook( thread, hook, mask, count )", "contents": "debug.sethook( ${1:thread}, ${2:hook}, ${3:mask}, ${4:count} )" },
		{ "trigger": "debug_setlocal( thread, level, local, value )", "contents": "debug.setlocal( ${1:thread}, ${2:level}, ${3:local}, ${4:value} )" },
		{ "trigger": "debug_setmetatable( object, table )", "contents": "debug.setmetatable( ${1:object}, ${2:table} )" },
		{ "trigger": "debug_setupvalue( func, up, value )", "contents": "debug.setupvalue( ${1:func}, ${2:up}, ${3:value} )" },
		{ "trigger": "debug_traceback( thread, message, level )", "contents": "debug.traceback( ${1:thread}, ${2:message}, ${3:level} )" },


		// Gamesense api
		{ "trigger": "client.set_event_callback(event_name, callback)", "contents": "client.set_event_callback(${1:event_name}, ${2:callback})" },
		
		{ "trigger": "client.log(msg, ...)", "contents": "client.log(${1:msg}, ${2:...})" },
		{ "trigger": "client.color_log(r, g, b, msg, ..)", "contents": "client.color_log(${1:r}, ${2:g}, ${3:b}, ${4:msg}, ${5:...})" },
		
		{ "trigger": "client.exec(cmd, ...)", "contents": "client.exec(${1:cmd}, ${2:...})" },
		{ "trigger": "client.userid_to_entindex(entity_index)", "contents": "client.userid_to_entindex(${1:entity_index})" },

		{ "trigger": "client.random_int(minimum, maximum)", "contents": "client.random_int(${1:minimum}, ${2:maximum})" },
		{ "trigger": "client.random_float(minimum, maximum)", "contents": "client.random_float(${1:minimum}, ${2:maximum})" },
		
		{ "trigger": "client.get_cvar(cvar_name)", "contents": "client.get_cvar(${1:cvar_name})" },
		{ "trigger": "client.set_cvar(cvar_name, value)", "contents": "client.set_cvar(${1:cvar_name}, ${2:value})" },
		
		{ "trigger": "client.draw_hitboxes(entindex, duration, hitboxes, r, g, b)", "contents": "client.draw_hitboxes(${1:entindex}, ${2:duration}, ${3:hitboxes}, ${4:r}, ${5:g}, ${6:b})" },
		{ "trigger": "client.draw_debug_text(x, y, z, line_offset, duration, r, g, b, a, ...)", "contents": "client.draw_debug_text(${1:x}, ${2:y}, ${3:z}, ${4:line_offset}, ${5:duration}, ${6:r}, ${7:g}, ${8:b}, ${9:a}, ${10:...})" },
		{ "trigger": "client.draw_text(paint_ctx, x, y, r, g, b, a, flags, max_width, ...)", "contents": "client.draw_text(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:r}, ${5:g}, ${6:b}, ${7:a}, ${8:flags}, ${9:max_width}, ${10:...})" },
		{ "trigger": "client.draw_rectangle(paint_ctx, x, y, w, h, r, g, b, a)", "contents": "client.draw_rectangle(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:r}, ${7:g}, ${8:b}, ${9:a})" },
		{ "trigger": "client.draw_line(paint_ctx, xa, ya, xb, yb, r, g, b, a)", "contents": "client.draw_line(${1:paint_ctx}, ${2:xa}, ${3:ya}, ${4:xb}, ${5:yb}, ${6:r}, ${7:g}, ${8:b}, ${9:a})" },
		{ "trigger": "client.draw_gradient(paint_ctx, x, y, w, h, r1, g1, b1, a1, r2, g2, b2, a2, ltr)", "contents": "client.draw_gradient(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:r1}, ${7:g1}, ${8:b1}, ${9:a1}, ${10:r2}, ${11:g2}, ${12:b2}, ${13:a2}, ${14:ltr},)" },
		{ "trigger": "client.draw_circle(paint_ctx, x, y, r, g, b, a, radius, start_degrees, percentage)", "contents": "client.draw_circle(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:r}, ${5:g}, ${6:b}, ${7:a}, ${8:radius}, ${9:start_degrees}, ${10:percentage})" },
		{ "trigger": "client.draw_circle_outline(paint_ctx, x, y, r, g, b, a, radius, start_degrees, percentage, thickness)", "contents": "client.draw_circle_outline(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:r}, ${5:g}, ${6:b}, ${7:a}, ${8:radius}, ${9:start_degrees}, ${10:percentage}, ${11:thickness})" },
		{ "trigger": "client.draw_indicator(paint_ctx, r, g, b, a, ...)", "contents": "client.draw_indicator(${1:paint_ctx}, ${2:r}, ${3:g}, ${4:b}, ${5:a}, ${6:...})" },
		
		{ "trigger": "client.world_to_screen(paint_ctx, x, y, z)", "contents": "client.world_to_screen(${1:paint_ctx}, ${2:x}, ${3:y}, ${4:z})" },
		{ "trigger": "client.timestamp()", "contents": "client.timestamp()" },
		{ "trigger": "client.screen_size()", "contents": "client.screen_size()" },
		{ "trigger": "client.latency()", "contents": "client.latency()" },
		{ "trigger": "client.camera_angles()", "contents": "client.camera_angles()" },
		{ "trigger": "client.eye_position()", "contents": "client.eye_position()" },
		{ "trigger": "client.visible(x, y, z)", "contents": "client.visible(${1:x}, ${2:y}, ${3:z})" },
		{ "trigger": "client.trace_line(skip_entindex, from_x, from_y, from_z, to_x, to_y, to_z)", "contents": "client.trace_line(${1:skip_entindex}, ${2:from_x}, ${3:from_y}, ${4:from_z}, ${5:to_x}, ${6:to_y}, ${7:to_z})" },
		{ "trigger": "client.delay_call(delay, callback, ...)", "contents": "client.delay_call(${1:delay}, ${2:callback}, ${3:...})" },

		{ "trigger": "entity.get_local_player()", "contents": "entity.get_local_player()" },
		{ "trigger": "entity.get_all(classname)", "contents": "entity.get_all(${1:classname})" },
		{ "trigger": "entity.get_players(enemies_only)", "contents": "entity.get_players(${1:enemies_only})" },
		{ "trigger": "entity.get_classname(entity)", "contents": "entity.get_classname(${1:entity})" },

		{ "trigger": "entity.get_prop(ent, propname, array_index)", "contents": "entity.get_prop(${1:ent}, ${2:propname}, ${3:array_index})" },
		{ "trigger": "entity.set_prop(ent, propname, value, array_index)", "contents": "entity.set_prop(${1:ent}, ${2:propname}, ${3:value}, ${4:array_index})" },

		{ "trigger": "entity.is_alive(entity)", "contents": "entity.is_alive(${1:entity})" },
		{ "trigger": "entity.is_enemy(entity)", "contents": "entity.is_enemy(${1:entity})" },
		{ "trigger": "entity.get_player_name(entity)", "contents": "entity.get_player_name(${1:entity})" },
		{ "trigger": "entity.get_player_weapon(entity)", "contents": "entity.get_player_weapon(${1:entity})" },
		{ "trigger": "entity.hitbox_position(player, hitbox)", "contents": "entity.hitbox_position(${1:player}, ${2:hitbox})" },
		{ "trigger": "entity.get_steam64(player)", "contents": "entity.get_steam64(${1:player})" },
		{ "trigger": "entity.get_bounding_box(paint_ctx, entity_index)", "contents": "entity.get_bounding_box(${1:paint_ctx}, ${2:entity_index})" },

		{ "trigger": "globals.realtime()", "contents": "globals.realtime()" },
		{ "trigger": "globals.curtime()", "contents": "globals.curtime()" },
		{ "trigger": "globals.absoluteframetime()", "contents": "globals.absoluteframetime()" },
		{ "trigger": "globals.frametime()", "contents": "globals.frametime()" },
		{ "trigger": "globals.framecount()", "contents": "globals.framecount()" },
		{ "trigger": "globals.maxplayers()", "contents": "globals.maxplayers()" },
		{ "trigger": "globals.tickcount()", "contents": "globals.tickcount()" },
		{ "trigger": "globals.tickinterval()", "contents": "globals.tickinterval()" },
		{ "trigger": "globals.mapname()", "contents": "globals.mapname()" },

		{ "trigger": "ui.reference(tab, container, name)", "contents": "ui.reference(${1:tab}, ${2:container}, ${3:name})" },
		{ "trigger": "ui.new_checkbox(tab, container, name)", "contents": "ui.new_checkbox(${1:tab}, ${2:container}, ${3:name})" },
		{ "trigger": "ui.new_hotkey(tab, container, name)", "contents": "ui.new_hotkey(${1:tab}, ${2:container}, ${3:name})" },
		{ "trigger": "ui.new_button(tab, container, name, callback)", "contents": "ui.new_button(${1:tab}, ${2:container}, ${3:name}, ${4:callback})" },
		{ "trigger": "ui.new_slider(tab, container, name, min, max, init_value, show_tooltip, unit, scale, tooltips)", "contents": "ui.new_slider(${1:tab}, ${2:container}, ${3:name}, ${4:min}, ${5:max}, ${6:init_value}, ${7:show_tooltip}, ${8:unit}, ${9:scale}, ${10:tooltips})" },
		{ "trigger": "ui.new_combobox(tab, container, name, ...)", "contents": "ui.new_combobox(${1:tab}, ${2:container}, ${3:name}, ${4:...})" },
		{ "trigger": "ui.new_multiselect(tab, container, name, ...)", "contents": "ui.new_multiselect(${1:tab}, ${2:container}, ${3:name}, ${4:...})" },
		{ "trigger": "ui.new_color_picker(tab, container, name, r, g, b, a)", "contents": "ui.new_color_picker(${1:tab}, ${2:container}, ${3:name}, ${4:r}, ${5:g}, ${6:b}, ${7:a})" },

		{ "trigger": "ui.set(item, value, ...)", "contents": "ui.set(${1:item}, ${2:value}, ${3:...})" },
		{ "trigger": "ui.get(item)", "contents": "ui.get(${1:item})" },
		{ "trigger": "ui.set_callback(item, callback)", "contents": "ui.set_callback(${1:item}, ${2:callback})" },
		{ "trigger": "ui.set_visible(item, visible)", "contents": "ui.set_visible(${1:item}, ${2:visible})" },
		{ "trigger": "ui.is_menu_open()", "contents": "ui.is_menu_open()" },
	]
}
